<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>modArithmetic</Title>
      <Author>Van</Author>
      <Description>Modular Arithmetic</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>modArithmetic</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>MOD_NAME</ID>
          <ToolTip>MOD</ToolTip>
          <Default>MOD</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>MOD_VALUE</ID>
          <ToolTip>BASE</ToolTip>
          <Default>int(1e9) + 7</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="cpp" Delimiter="$" Kind="method decl"><![CDATA[#pragma region Modular Arithmetic
int MOD = int(1e9) + 7;
inline int add(const int a, const int b, const int mod = MOD) { return (a + b >= mod) ? (a + b - mod) : (a + b); }
inline void _add(int &a, const int b, const int mod = MOD) { a = add(a, b, mod); }
inline int sub(const int a, const int b, const int mod = MOD) { return (a - b < 0) ? (a - b + mod) : (a - b); }
inline void _sub(int &a, const int b, const int mod = MOD) { a = sub(a, b, mod); }
inline int negate(const int a, const int mod = MOD) { return mod - a; }
inline int mul(const int a, const int b, const int mod = MOD) { return (a * 1ll * b) % mod; }
inline void _mul(int &a, const int b, const int mod = MOD) { a = mul(a, b, mod); }
int binPow(int b, lli p, const int mod = MOD) {
	int r = 1;
	while (p) {
		if (p & 1) r = mul(r, b, mod);
		b = mul(b, b, mod);
		p >>= 1;
	}
	return r;
}
int gcdex(int a, int b, int &x, int &y) {
	if (!b) return x = 1, y = 0, a;
	int px, py, res = gcdex(b, a % b, px, py);
	return x = py, y = px - a / b * py, res;
}
int inv(const int a, const int mod = MOD) { // a and mod must be coprime
	int x, y;
	int g = gcdex(a, mod, x, y);
	assert(g == 1);
	x = (x % mod + mod) % mod;
	return x;
}
inline int dvd(const int a, const int b, const int mod = MOD) { // b and mod must be coprime
	int rev = inv(b, mod);
	return mul(a, inv(b, mod), mod);
} // b != 0
inline void _dvd(int &a, const int b, const int mod = MOD) { a = dvd(a, b, mod); } // b and mod must be coprime
inline int convert(int x, const int mod = MOD) {
	int tx = x % mod + mod;
	return tx >= mod ? tx - mod : tx;
};
struct mNum {
	int x, m;
	mNum(int _x, int m = MOD) : x(convert(_x, m)), m(m) {}
	mNum(lli _x, int m = MOD) : x(convert(_x, m)), m(m) {}
};
mNum operator +(mNum a, mNum b) { return mNum(add(a.x, b.x, a.m), a.m); }
mNum operator -(mNum a, mNum b) { return mNum(sub(a.x, b.x, a.m), a.m); }
mNum operator *(mNum a, mNum b) { return mNum(mul(a.x, b.x, a.m), a.m); }
mNum operator /(mNum a, mNum b) { return mNum(dvd(a.x, b.x, a.m), a.m); }
mNum operator ^(mNum a, lli x) { return mNum(binPow(a.x, x, a.m), a.m); }
mNum operator +=(mNum &a, mNum b) { return a = a + b; }
mNum operator -=(mNum &a, mNum b) { return a = a - b; }
mNum operator *=(mNum &a, mNum b) { return a = a * b; }
mNum operator /=(mNum &a, mNum b) { return a = a / b; }
mNum operator ^=(mNum &a, lli x) { return a = a ^ x; }
#pragma endregion
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>