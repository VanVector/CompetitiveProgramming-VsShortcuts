<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>geometryDouble</Title>
      <Author>Van</Author>
      <Description>2D Geometry with Double</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>geometryDouble</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
      </Declarations>
      <Code Language="cpp" Delimiter="$" Kind="method decl"><![CDATA[
#pragma region geometry_double
// see http://e-maxx.ru/bookz/files/andreeva.pdf for geometry
typedef long double ld;

const ld PI = acos(-1.0);
const ld eps = 1e-9;

int sign(ld x) { return x < -eps ? -1 : x < eps ? 0 : 1; }
bool between(ld l, ld r, ld x) {
    if (l > r) swap(l, r);
    return l <= x + eps && x - eps <= r;
}

struct Point {
    ld x, y;
    Point(ld _x, ld _y) : x(_x), y(_y) {}
    Point() {}

    Point operator +(const Point &b) const { return Point(x + b.x, y + b.y); }
    Point operator -(const Point &b) const { return Point(x - b.x, y - b.y); }
    bool operator ==(const Point b) const { return fabs(x - b.x) < eps && fabs(y - b.y) < eps; }
    bool operator<(const Point &p) const { return fabs(x - p.x) > eps ? x < p.x : y < p.y - eps; }

    Point operator *(const ld m) const { return Point(x * m, y * m); }
    Point operator /(const ld m) const { assert(m != 0);  return Point(x / m, y / m); }
    ld lengthSqr() const { return x * x + y * y; }
    ld length() const { return sqrt(lengthSqr()); }

    // cross product
    ld operator>>(const Point &p) const { return x * p.y - y * p.x; }
    ld operator<<(const Point &p) const { return p.x * y - p.y * x; }
    bool operator||(const Point &p) const { return fabs(*this >> p) < eps; }

    // scalar/dot product
    ld operator*(const Point &p) const { return x * p.x + y * p.y; }

    void eprint() {
        eprintf("DEBUG: (%lf, %lf)\n", x, y);
    }
};

// Check if two vectors are collinear
bool colinear(const Point p1, const Point p2) {
    return p1 || p2;
}

// Check if two vectors are unidirected
bool unidirected(const Point p1, const Point p2) {
    if (!(p1 || p2))
        return false;
    return p1.x * p2.x > -eps && p1.y * p2.y > -eps;
}

// Check if two vectors are orthogonal
bool orthogonal(const Point p1, const Point p2) {
    return fabs(p1 * p2) <= eps;
}

Point rotate(Point p, ld ang) {
	ld ca = cos(ang), sa = sin(ang);
	return Point(ca * p.x - sa * p.y, sa * p.x + ca * p.y);
}

struct Line {
    ld a, b, c;
    Line() : a(0), b(0), c(1) {}
    Line(const Point &p1, const Point &p2) {
        a = p1.y - p2.y;
        b = p2.x - p1.x;
        c = -a * p1.x - b * p1.y;
    }
    Line(ld a, ld b, ld c) : a(a), b(b), c(c) {}
    Point normal() const { return  Point(a, b); }
    ld normalSqr() const { return a * a + b * b; }
    // norimalized line equation
    Line normalized() const { assert(fabs(a) > eps || fabs(b) > eps); ld normalLength = sqrt(normalSqr());  return Line(a / normalLength, b / normalLength, c / normalLength); }
    ld substitute(const Point &p) const { return a * p.x + b * p.y + c; }
    ld distanceSigned(const Point &p) const { return substitute(p) / sqrt(normalSqr()); }
    ld distance(const Point &p) const { return fabs(substitute(p)) / sqrt(normalSqr()); }
    int side(const Point &p) const { return sign(substitute(p)); }

    // check if two lines coincide
    bool operator==(Line l) {
        return fabs(a * l.b - b * l.a) < eps && fabs(b * l.c - c * l.b) < eps;
    }

    // check if two lines are parallel
    bool operator||(Line l) {
        return fabs(a * l.b - b * l.a) < eps;
    }

    // Finds a point of lines intersection.
    // Lines should not be parallel or coincide.
    Point operator&(const Line l) {
        assert(!(*this || l));
        ld d = a * l.b - b * l.a;
        assert(fabs(d) > eps);
        Point res((b * l.c - c * l.b) / d, (a * l.c - c * l.a) / -d);
        assert(side(res) == 0);
        assert(l.side(res) == 0);
        return res;
    }
};

struct Segment {
    Point a, b;
    Segment() {}
    Segment(const Point _a, const Point _b) : a(_a), b(_b) {}

    // returns true if point lies on the segment
    bool operator&& (const Point &p) const {
        if (fabs((p - a) >> (p - b)) > eps) return false;
        return between(a.x, b.x, p.x) && between(a.y, b.y, p.y);
    }

    // Returns either two points defining the end of common segment
    // or signle intersection point,
    // or empty collection when there is no intersection.
    vector<Point> operator& (const Segment &s) const {
        Point b1 = b, a1 = a;
        Point b2 = s.b, a2 = s.a;
        if (fabs((b1 - a1) >> (b2 - a2)) < eps) {
            if (b1 < a1) swap(a1, b1);
            if (b2 < a2) swap(a2, b2);
            if (a2 < a1) swap(a1, a2), swap(b1, b2);
            if (b1 < a2) return vector<Point>();
            if (b1 == a2) return vector<Point>(1, b1);
            vector<Point> res;
            res.push_back(a2);
            res.push_back(b1);
            return res;
        }
        Point res = Line(a1, b1) & Line(a2, b2);
        if (!(*this && res) || !(s && res))
            return vector<Point>();
        return vector<Point>(1, res);
    }

    // Closest distance between segment and point.
    ld distance(const Point &p) const {
        // segment ends coincide
        if (a == b) return sqrt((a - p).lengthSqr());
        // drop a perpendicular on segement line
        Line l = Line(a, b).normalized();
        Point mid = p + l.normal() * (-l.substitute(p));
        if (between(a.x, b.x, mid.x) && between(a.y, b.y, mid.y)) return sqrt((mid - p).lengthSqr());
        // the foot of the perpendicular is not on the segment
        return sqrt(min((a - p).lengthSqr(), (b - p).lengthSqr()));
    }

    // Closest distance between segments.
    // Get min across all distances between segments and its ends combinations.
    ld distance(const Segment s) {
        ld ans = distance(s.a);
        ans = min(ans, distance(s.b));
        ans = min(ans, s.distance(a));
        ans = min(ans, s.distance(b));
        return ans;
    }
};
#pragma endregion geometry_double

$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>