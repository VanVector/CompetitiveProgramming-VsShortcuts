<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>eratoSieve</Title>
      <Author>Van</Author>
      <Description>Erato Sieve</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>eratoSieve</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>MaxPrime</ID>
          <ToolTip>MaxPrime</ToolTip>
          <Default>1e6</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="cpp" Delimiter="$" Kind="method decl"><![CDATA[#pragma region Erato Sieve
const int MAX_PRIME = 1e6;
int divisors[MAX_PRIME] = { 0 }, primes[MAX_PRIME] = { 0 }, nPrimes = 0;
void generatePrimes() {
	for (int i = 2; i < MAX_PRIME; i++) {
		if (divisors[i] == 0) divisors[i] = primes[nPrimes++] = i;
		for (int j = 0; j < nPrimes && 1ll * i * primes[j] < MAX_PRIME; j++)
			divisors[i * primes[j]] = min(divisors[i], primes[j]);
	}
}

map<lli, int> factorize(lli x) { // max prime should be greater than or equal to the square root of x
	map<lli, int> res;
	for (int i = 0; 1ll * primes[i] * primes[i] <= x; i++) {
		if (x % primes[i] == 0) {
			int c = 0;
			while (x % primes[i] == 0) c++, x /= primes[i];
			res[primes[i]] = c;
		}
	}
	if (x != 1) res[x] = 1;
	return res;
}

lli phi(lli x) { // if known that x is prime return x - 1
	auto f = factorize(x);
	lli res = x;
	for (auto &p : f) res -= res / p.first;
	return res;
}

int getPrimitiveRoot(int m) {
	// TODO check n to have any primitive root.
	auto f = factorize(phi(m));
	for (int g = 2; g < m; g++) {
		set<int> s;
		bool ok = true;
		for (auto &p : f) {
			int d = (m - 1) / p.first;
			ok &= (mNum(g, m) ^ d).x != 1;
		}
		if (ok) return g;
	}
	return -1;
}
#pragma endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
