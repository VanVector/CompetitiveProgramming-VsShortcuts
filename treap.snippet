<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
			<Title>treap</Title>
			<Author>Van</Author>
			<Description>treap</Description>
			<HelpUrl>
			</HelpUrl>
			<Shortcut>treap</Shortcut>
		</Header>
		<Snippet>
			<Declarations>
				<Literal Editable="true">
					<ID>TValue</ID>
					<ToolTip>TValue</ToolTip>
					<Default>int</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>TRange</ID>
					<ToolTip>TRange</ToolTip>
					<Default>lli</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>MAXSTACKSIZE</ID>
					<ToolTip>MAXSTACKSIZE</ToolTip>
					<Default>1e5 + 100</Default>
					<Function>
					</Function>
				</Literal>
			</Declarations>
			<Code Language="cpp" Delimiter="$"><![CDATA[#pragma region Treap
// TValue should have 
// TRange operator+ (const TRange &r);
// bool operator< (const TValue &v);
typedef $TValue$ TValue;
typedef $TRange$ TRange;

struct TreapNode {
	TreapNode *l, *r, *p;
	int y;
	size_t size;
	TValue value;
	TRange rangeValue;
	TreapNode() { }

	static size_t getSize(TreapNode *t) { return t == NULL ? 0 : t->size; }
	static TRange getRangeValue(TreapNode *t) { return t == NULL ? 0 : t->rangeValue; }
	static void update(TreapNode *t) {
		if (t == NULL) return;
		t->size = getSize(t->l) + getSize(t->r) + 1;
		t->rangeValue = t->value + getRangeValue(t->l) + getRangeValue(t->r);
	}

	TreapNode(TValue _value) : y((1 << 16) * rand() + rand()), value(_value) {
		l = r = p = NULL;
		update(this);
	}

	static TreapNode *merge(TreapNode *t1, TreapNode *t2) {
		if (t1 == NULL) return t2;
		if (t2 == NULL) return t1;
		TreapNode *t;
		if (t1->y > t2->y) {
			t = t1;
			t->r = merge(t->r, t2);
			t->r->p = t;
		}
		else { // <=
			t = t2;
			t->l = merge(t1, t->l);
			t->l->p = t;
		}
		TreapNode::update(t);
		return t;
	}

#pragma region Split
	static void splitByValue_l_ge(TreapNode *t, TValue value, TreapNode* &L, TreapNode* &R) {
		if (t == NULL) return void(L = R = NULL);
		if (t->value < value) { // greaterOrEqual values go right
			splitByValue_l_ge(t->r, value, t->r, R);
			if (t->r != NULL) t->r->p = t;
			if (R != NULL) R->p = NULL;
			L = t;
		} else { // lower values go left
			splitByValue_l_ge(t->l, value, L, t->l);
			if (t->l != NULL) t->l->p = t;
			if (L != NULL) L->p = NULL;
			R = t;
		}
		TreapNode::update(t);
	}

	static void splitByValue_le_g(TreapNode *t, TValue value, TreapNode* &L, TreapNode* &R) {
		if (t == NULL) return void(L = R = NULL);
		if (value < t->value) { // lowerOrEqual values go left
			splitByValue_le_g(t->l, value, L, t->l);
			if (t->l != NULL) t->l->p = t;
			if (L != NULL) L->p = NULL;
			R = t;
		} else { // greater values go right
			splitByValue_le_g(t->r, value, t->r, R);
			if (t->r != NULL) t->r->p = t;
			if (R != NULL) R->p = NULL;
			L = t;
		}
		TreapNode::update(t);
	}

	static void splitByIndex(TreapNode *t, int idx, TreapNode* &L, TreapNode* &R) {
		if (t == NULL) return void(L = R = NULL);
		int currentIndex = TreapNode::getSize(t->l);
		if (idx <= currentIndex) {
			splitByIndex(t->l, idx, L, t->l);
			if (t->l != NULL) t->l->p = t;
			if (L != NULL) L->p = NULL;
			R = t;
		}
		else {
			splitByIndex(t->r, idx - currentIndex - 1, t->r, R);
			if (t->r != NULL) t->r->p = t;
			if (R != NULL) R->p = NULL;
			L = t;
		}
		TreapNode::update(t);
	}
#pragma endregion

	struct iterator {
		TreapNode* curr;
		iterator(TreapNode* _curr) : curr(_curr) {}
		iterator& operator++() {
			assert(curr != NULL);
			TreapNode *t = curr->r;
			if (t != NULL) while (t->l != NULL) t = t->l;
			else {
				for (t = curr; t->p != NULL && t->p->r == t; t = t->p);
				t = t->p;
			}
			curr = t;
			return *this;
		}
		bool operator != (const TreapNode::iterator &other) { return curr != other.curr; }
		bool operator == (const TreapNode::iterator &other) { return curr == other.curr; }
		TreapNode* operator *() { return curr; }
	};
};

struct TreapNodeStackBase {
	virtual TreapNode *getNext() = 0;
};

const int MAXSTACKSIZE = $MAXSTACKSIZE$;
struct TreapNodeStack : TreapNodeStackBase {
	TreapNode stack[MAXSTACKSIZE];
	int size;
	TreapNodeStack() { size = 0; }
	TreapNode *getNext() override { return &stack[size++]; }
} stack;

struct TreapNodeStackDynamic : TreapNodeStackBase {
	TreapNode *getNext() override { return new TreapNode(); }
};

struct Treap {
	TreapNodeStackBase* s;
	TreapNode* root;
	Treap(): root(NULL) { s = new TreapNodeStackDynamic(); }
	Treap(TreapNode* _root): root(_root) { s = new TreapNodeStackDynamic(); }
	Treap(TreapNodeStackBase* _s) : s(_s), root(NULL) {}
	Treap(TreapNodeStackBase* _s, TreapNode* _root) : s(_s), root(_root) {}

	size_t size() { return TreapNode::getSize(root); }
	TRange range() { return TreapNode::getRangeValue(root); }
	void clear() { root = NULL; }

	size_t count(TValue value) {
		TreapNode *l, *r, *tmp;
		TreapNode::splitByValue_l_ge(root, value, l, r);
		TreapNode::splitByValue_le_g(r, value, tmp, r);
		size_t res = TreapNode::getSize(tmp);
		l = TreapNode::merge(l, tmp);
		root = TreapNode::merge(l, r);
	}

	void insert(TValue value) {
		TreapNode *t = s->getNext();
		(*t) = TreapNode(value);
		TreapNode *l, *r;
		TreapNode::splitByValue_l_ge(root, value, l, r);
		l = TreapNode::merge(l, t);
		root = TreapNode::merge(l, r);
	}

	TreapNode::iterator begin() {
		TreapNode *t = root;
		while (t != NULL && t->l != NULL) t = t->l;
		return TreapNode::iterator(t);
	}
	TreapNode::iterator end() { return TreapNode::iterator(NULL); }

	TreapNode* operator[](int i) {
		assert(i < TreapNode::getSize(root) && i >= 0);
		TreapNode *l, *r, *t;
		TreapNode::splitByIndex(root, i, l, r);
		for (t = r; t != NULL && t->l != NULL; t = t->l);
		TreapNode::merge(l, r);
		return t;
	}

	// erases ALL nodes with value
	void erase(TValue value) {
		TreapNode *l, *r, *tmp;
		TreapNode::splitByValue_l_ge(root, value, l, r);
		TreapNode::splitByValue_le_g(r, value, tmp, r);
		root = TreapNode::merge(l, r);
	}

#pragma region Range Queries
	TRange getRangeIdx(int idx, bool takeRight) {
		TreapNode *l, *r;
		TreapNode::splitByIndex(root, idx, l, r);
		TRange res = TreapNode::getRangeValue(takeRight ? r : l);
		root = TreapNode::merge(l, r);
		return res;
	}
	TRange getRangeBetweenIdx(int li, int ri) {
		TreapNode *l, *r, *tmp;
		TreapNode::splitByIndex(root, ri + 1, l, r);
		TreapNode::splitByIndex(l, li, l, tmp);
		TRange res = TreapNode::getRangeValue(tmp);
		l = TreapNode::merge(l, tmp);
		root = TreapNode::merge(l, r);
		return res;
	}

	TRange getRangeValueGen(TValue value, bool takeRight, function<void(TreapNode*, TValue, TreapNode*&, TreapNode*&)> split) {
		TreapNode *l, *r;
		split(root, value, l, r);
		TRange res = TreapNode::getRangeValue(takeRight ? r : l);
		root = TreapNode::merge(l, r);
		return res;
	}
	TRange getRangeValue_g(TValue value) { return getRangeValueGen(value, 1, TreapNode::splitByValue_le_g); }
	TRange getRangeValue_ge(TValue value) { return getRangeValueGen(value, 1, TreapNode::splitByValue_l_ge); }
	TRange getRangeValue_l(TValue value) { return getRangeValueGen(value, 0, TreapNode::splitByValue_l_ge); }
	TRange getRangeValue_le(TValue value) { return getRangeValueGen(value, 0, TreapNode::splitByValue_le_g); }
	TRange getRangeBetweenValues(TValue lv, TValue rv) {
		TreapNode *l, *r, *tmp;
		TreapNode::splitByValue_le_g(root, rv, l, r);
		TreapNode::splitByValue_l_ge(l, lv, l, tmp);
		TRange res = TreapNode::getRangeValue(tmp);
		l = TreapNode::merge(l, tmp);
		root = TreapNode::merge(l, r);
		return res;
	}
#pragma endregion

#pragma region Split/Merge
	tuple<Treap, Treap> splitByValue_le_g(TValue value) {
		TreapNode *l, *r;
		TreapNode::splitByValue_le_g(root, value, l, r);
		return make_tuple(Treap(s, l), Treap(s, r));
	}

	tuple<Treap, Treap> splitByValue_l_ge(TValue value) {
		TreapNode *l, *r;
		TreapNode::splitByValue_l_ge(root, value, l, r);
		return make_tuple(Treap(s, l), Treap(s, r));
	}

	// Merges two treaps in O(minSz * log(maxSz)), greater treap is destroyed.
	Treap Merge(Treap t2) {
		Treap *greater, *lower;
		greater = size() > t2.size() ? this : &t2;
		lower = size() > t2.size() ? &t2 : this;
		for (auto tn : *lower) greater->insert(tn->value);
		return *greater;
	}
#pragma endregion

	void out() {
#ifdef _LOCAL_VAN
		out(root);
#endif
	}
	void out(TreapNode *t, int lvl = 1) {
		if (lvl == 1) printf("-------------------\n");
		if (t == NULL) return;
		out(t->l, lvl + 1);
		printf("%*c%d\n", lvl, ' ', t->value);
		out(t->r, lvl + 1);
	}
};
#pragma endregion

$end$]]></Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>